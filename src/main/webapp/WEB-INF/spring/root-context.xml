<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xsi:schemaLocation="http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">

	<!-- Root Context: defines shared resources visible to all other web components -->

	<!-- 스프링에서 root-context.xml은 스프링이 로딩되면서 읽어 들이는 문서이므로, 주로 이미 만들어진 클래스들을 이용해서 
		스프링의 빈(Bean)으로 등록할 때 사용됩니다. 일반적인 상황이라면 프로젝트에 직접 작성하는 클래스들은 어노테이션을 이용하는 경우가 
		많고, 외부 jar 파일 등으로 사용하는 클래스들은 <bean> 태그를 이용해서 작성하는 경우가 대부분입니다. -->
	<bean id="hikariConfig" class="com.zaxxer.hikari.HikariConfig">
		<!-- <property name="driverClassName" value="oracle.jdbc.OracleDriver"></property> -->
		<property name="driverClassName"
			value="net.sf.log4jdbc.sql.jdbcapi.DriverSpy"></property>
		<!-- <property name="jdbcUrl" value="jdbc:oracle:thin:@test2_medium?TNS_ADMIN=D:/dev/tools/db/Wallet_test2"></property> -->
		<property name="jdbcUrl"
			value="jdbc:log4jdbc:oracle:thin:@test2_medium?TNS_ADMIN=D:/dev/tools/db/Wallet_test2"></property>
		<property name="username" value="ADMIN"></property>
		<property name="password" value="Oracledatabase!486@"></property>
	</bean>
	<!-- HikariCP configuration -->
	<bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource"
		destroy-method="close">
		<constructor-arg ref="hikariConfig" />
	</bean>

	<!-- MyBatis에서 가장 핵심적인 객체는 SQLSession이라는 존재와 SqlSessionFactroy입니다. SqlSessionFactory의 
		이름에서 보듯이 내부적으로 SQLSession이라는 것을 만들어 내는 존재인데, 개발에서는 SQLSession을 통해서 Connection을 
		생성하거나 원하는 SQL을 전달하고, 결과를 리턴 받는 구조로 작성하게 됩니다. 스프링에 SqlSessionFactory를 등록하는 
		작업은 SqlSessionFactoryBean을 이용합니다. 패키지명을 보면 MyBatis의 패키지가 아니라 스프링과 연동 작업을 
		처리하는 mybatis-spring 라이브러리의 클래스임을 알 수 있습니다. -->
	<bean id="sqlSessionFactory"
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
	</bean>

	<!-- <mybatis-spring:scan> 태그의 base-package 속성은 지정된 패키지의 모든 MyBatis 관련 어노테이션을 
		찾아서 처리합니다. Mapper를 설정하는 작업은 각각의 XML이나 Mapper 인터페이스를 설정할 수도 있지만, 매번 너무 번잡하기 
		때문에 예제는 자동으로 com.jckang.ex02.mapper 패키지를 인식하는 방식으로 작성하는 것이 가장 편리합니다. -->
	<mybatis-spring:scan
		base-package="com.jckang.ex02.mapper" />

</beans>
